# Generated from SimpleArithmetic.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,71,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,1,1,1,1,1,
        1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,3,6,39,8,6,1,6,4,6,42,8,6,11,
        6,12,6,43,1,7,4,7,47,8,7,11,7,12,7,48,1,8,1,8,1,8,3,8,54,8,8,1,8,
        1,8,1,9,1,9,1,9,3,9,61,8,9,1,9,1,9,1,10,4,10,66,8,10,11,10,12,10,
        67,1,10,1,10,0,0,11,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,1,0,2,1,0,48,57,3,0,9,10,13,13,32,32,76,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,1,23,1,0,
        0,0,3,26,1,0,0,0,5,29,1,0,0,0,7,31,1,0,0,0,9,33,1,0,0,0,11,35,1,
        0,0,0,13,38,1,0,0,0,15,46,1,0,0,0,17,53,1,0,0,0,19,60,1,0,0,0,21,
        65,1,0,0,0,23,24,5,43,0,0,24,25,5,43,0,0,25,2,1,0,0,0,26,27,5,45,
        0,0,27,28,5,45,0,0,28,4,1,0,0,0,29,30,5,42,0,0,30,6,1,0,0,0,31,32,
        5,47,0,0,32,8,1,0,0,0,33,34,5,40,0,0,34,10,1,0,0,0,35,36,5,41,0,
        0,36,12,1,0,0,0,37,39,5,45,0,0,38,37,1,0,0,0,38,39,1,0,0,0,39,41,
        1,0,0,0,40,42,7,0,0,0,41,40,1,0,0,0,42,43,1,0,0,0,43,41,1,0,0,0,
        43,44,1,0,0,0,44,14,1,0,0,0,45,47,7,0,0,0,46,45,1,0,0,0,47,48,1,
        0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,16,1,0,0,0,50,51,5,46,0,0,51,
        52,5,46,0,0,52,54,5,46,0,0,53,50,1,0,0,0,53,54,1,0,0,0,54,55,1,0,
        0,0,55,56,3,15,7,0,56,18,1,0,0,0,57,58,5,126,0,0,58,59,5,126,0,0,
        59,61,5,126,0,0,60,57,1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,63,
        3,15,7,0,63,20,1,0,0,0,64,66,7,1,0,0,65,64,1,0,0,0,66,67,1,0,0,0,
        67,65,1,0,0,0,67,68,1,0,0,0,68,69,1,0,0,0,69,70,6,10,0,0,70,22,1,
        0,0,0,7,0,38,43,48,53,60,67,1,6,0,0
    ]

class SimpleArithmeticLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    NINT = 7
    INT = 8
    EINT = 9
    EPINT = 10
    WS = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'++'", "'--'", "'*'", "'/'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "NINT", "INT", "EINT", "EPINT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NINT", 
                  "INT", "EINT", "EPINT", "WS" ]

    grammarFileName = "SimpleArithmetic.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


